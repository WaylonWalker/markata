[{"slug": "markata/cli/header", "title": "header.py", "description": "None !!! class Header  class ???+ source \"Header  source \" ```python class Header: \"\"\"Display header with clock.\"\"\"", "tags": []}, {"slug": "markata/cli/cli", "title": "cli.py", "description": "None !!! function make_layout  function ???+ source \"make_layout  source \" ```python def make_layout() -> Layout: \"\"\"Define the layout.\"\"\" layout =\u2026", "tags": []}, {"slug": "markata/cli/main", "title": "__main__.py", "description": "None", "tags": []}, {"slug": "markata/cli/didyoumean", "title": "didyoumean.py", "description": "dummy didyoumean page for testing didyoumean suggestions", "tags": []}, {"slug": "markata/cli/init", "title": "__init__.py", "description": "None", "tags": []}, {"slug": "markata/cli/summary", "title": "summary.py", "description": "Run it Configuration There are two main things currently supported by summary, It can count the number of posts based on a filter ( grid_attr`). grid_attr\u2026", "tags": []}, {"slug": "markata/cli/plugins", "title": "plugins.py", "description": "None", "tags": []}, {"slug": "markata/cli/server", "title": "server.py", "description": "None !!! function find_port  function ???+ source \"find_port  source \" ```python def find_port(port: int = 8000) -> int: \"\"\"Find a port not in ues starting at\u2026", "tags": []}, {"slug": "markata/cli/runner", "title": "runner.py", "description": "None !!! class Runner  class ???+ source \"Runner  source \" ```python class Runner: \"\"\"Display Footer\"\"\" !!! method run  method ???+ source \"run  source \" !!!\u2026", "tags": []}, {"slug": "markata/scripts/migrate-to-slugify", "title": "migrate_to_slugify.py", "description": "Slugify migration for projects moving from markata<0.5.0 into markata>=0.5.0 to run this script install markata>=0.5.0 and run the following. Then make sure\u2026", "tags": []}, {"slug": "markata/plugins/render-markdown", "title": "render_markdown.py", "description": "The   plugin converts markdown content to HTML. This plugin is essential for rendering markdown files loaded by the   plugin. Installation This plugin is\u2026", "tags": []}, {"slug": "markata/plugins/mdit-details", "title": "mdit_details.py", "description": "The   plugin adds support for collapsible details/summary sections in markdown using the   syntax. This is similar to HTML's   element but with a more\u2026", "tags": []}, {"slug": "markata/plugins/manifest", "title": "manifest.py", "description": "The   plugin generates a Web App Manifest (manifest.json) file for your site. This enables Progressive Web App (PWA) features and provides metadata for mobile\u2026", "tags": []}, {"slug": "markata/plugins/glob", "title": "glob.py", "description": "The   plugin handles file discovery using glob patterns. It determines which files should be processed by Markata based on configured patterns. A glob is a\u2026", "tags": []}, {"slug": "markata/plugins/auto-description", "title": "auto_description.py", "description": "The   plugin automatically generates descriptions for your posts by extracting text from the first paragraphs of your markdown content. It can create multiple\u2026", "tags": []}, {"slug": "markata/plugins/docs", "title": "docs.py", "description": "The   plugin automatically generates documentation pages from Python source code docstrings. It parses Python files, extracts docstrings and code structure,\u2026", "tags": []}, {"slug": "markata/plugins/sitemap", "title": "sitemap.py", "description": "[DEPRECATED] The   plugin is deprecated and will be removed in a future version. Please use   instead, which provides more comprehensive sitemap generation\u2026", "tags": []}, {"slug": "markata/plugins/heading-link", "title": "heading_link.py", "description": "The   plugin adds clickable link icons next to headings in your HTML output. This makes it easy for readers to share direct links to specific sections of your\u2026", "tags": []}, {"slug": "markata/plugins/datetime", "title": "datetime.py", "description": "The   plugin handles date and time parsing for posts. It ensures consistent datetime handling by converting various date formats to timezone-aware datetime\u2026", "tags": []}, {"slug": "markata/plugins/publish-dev-to-source", "title": "publish_dev_to_source.py", "description": "The   plugin enables synchronization between your Markata posts and dev.to articles. It handles frontmatter translation and content formatting for dev.to\u2026", "tags": []}, {"slug": "markata/plugins/post-template", "title": "post_template.py", "description": "The   plugin handles the rendering of posts using Jinja2 templates. It provides extensive configuration options for HTML head elements, styling, and template\u2026", "tags": []}, {"slug": "markata/plugins/copy-assets", "title": "copy_assets.py", "description": "The   plugin copies static assets (images, CSS, JavaScript, etc.) from your assets directory to the output directory during the build process. Installation\u2026", "tags": []}, {"slug": "markata/plugins/create-covers", "title": "create_covers.py", "description": "The   plugin is a simplified version of the covers plugin. It generates basic cover images with titles using a single template and font configuration.\u2026", "tags": []}, {"slug": "markata/plugins/tui", "title": "tui.py", "description": "None", "tags": []}, {"slug": "markata/plugins/publish-source", "title": "publish_source.py", "description": "The   plugin saves processed markdown files to the output directory, preserving frontmatter and content modifications. This enables source file access\u2026", "tags": []}, {"slug": "markata/plugins/pyinstrument", "title": "pyinstrument.py", "description": "The   plugin adds performance profiling capabilities using pyinstrument. It generates detailed HTML reports showing where your build spends time. Installation\u2026", "tags": []}, {"slug": "markata/plugins/config-model", "title": "config_model.py", "description": "The   plugin defines Markata's core configuration model, providing validation and type safety for all configuration options. Installation This plugin is\u2026", "tags": []}, {"slug": "markata/plugins/post-model", "title": "post_model.py", "description": "The   plugin defines the core Post model used throughout Markata. It provides robust validation, serialization, and configuration options for all post\u2026", "tags": []}, {"slug": "markata/plugins/didyoumean", "title": "didyoumean.py", "description": "DidYouMean Plugin for Markata Automatically generates redirect pages for URLs that may be mistyped by users. Installation Configuration Usage This plugin will\u2026", "tags": []}, {"slug": "markata/plugins/publish-html", "title": "publish_html.py", "description": "The   plugin handles saving rendered HTML content to files. It determines the output path for each article and ensures files are saved in the correct location\u2026", "tags": []}, {"slug": "markata/plugins/to-json", "title": "to_json.py", "description": "None", "tags": []}, {"slug": "markata/plugins/jinja-md", "title": "jinja_md.py", "description": "The   plugin enables Jinja2 templating within your markdown content. This allows you to dynamically generate content using Python expressions and access to\u2026", "tags": []}, {"slug": "markata/plugins/skip", "title": "skip.py", "description": "Post Skipping and Caching Plugin !!! function post_model  function ???+ source \"post_model  source \" !!! function load  function ???+ source \"load  source \"\u2026", "tags": []}, {"slug": "markata/plugins/auto-title", "title": "auto_title.py", "description": "The   plugin automatically generates titles for posts that don't have a title specified in their frontmatter. It uses the filename to create a human-readable\u2026", "tags": []}, {"slug": "markata/plugins/create-models", "title": "create_models.py", "description": "The   plugin dynamically creates Markata's core Pydantic models by combining model fragments from various plugins. This enables extensible and type-safe data\u2026", "tags": []}, {"slug": "markata/plugins/md-it-highlight-code", "title": "md_it_highlight_code.py", "description": "The   plugin adds syntax highlighting to code blocks in your markdown content. It uses Pygments for highlighting and adds a copy button for easy code sharing.\u2026", "tags": []}, {"slug": "markata/plugins/subroute", "title": "subroute.py", "description": "None", "tags": []}, {"slug": "markata/plugins/prevnext", "title": "prevnext.py", "description": "The   plugin adds previous and next navigation links to each post, allowing readers to easily navigate between related content. Installation This plugin is\u2026", "tags": []}, {"slug": "markata/plugins/jinja-env", "title": "jinja_env.py", "description": "Jinja2 Environment Plugin Provides a centralized Jinja2 environment configuration for consistent template rendering across all Markata plugins. This plugin\u2026", "tags": []}, {"slug": "markata/plugins/service-worker", "title": "service_worker.py", "description": "Adds a service_worker to your site.  This will make it installable on mobile, viewable offline, and potentially more responsive as the user goes between good\u2026", "tags": []}, {"slug": "markata/plugins/rss", "title": "rss.py", "description": "[DEPRECATED] The   plugin is deprecated and will be removed in a future version. Please use   instead, which provides more comprehensive feed generation\u2026", "tags": []}, {"slug": "markata/plugins/init", "title": "__init__.py", "description": "None", "tags": []}, {"slug": "markata/plugins/seo", "title": "seo.py", "description": "manifest plugin", "tags": []}, {"slug": "markata/plugins/icon-resize", "title": "icon_resize.py", "description": "The   plugin automatically generates favicons in multiple sizes from a single source image. This ensures your site has appropriate icons for different devices\u2026", "tags": []}, {"slug": "markata/plugins/redirects", "title": "redirects.py", "description": "The   plugin creates static redirects for your site using a simple configuration file. Compatible with services like Cloudflare Pages and Netlify.\u2026", "tags": []}, {"slug": "markata/plugins/feeds", "title": "feeds.py", "description": "The   plugin is used to create feed pages, which are lists of posts.  The list is generated using a  , then each post in the list is rendered with a   before\u2026", "tags": []}, {"slug": "markata/plugins/flat-slug", "title": "flat_slug.py", "description": "The   plugin handles URL slug generation for your articles. It sanitizes special characters that don't work in browsers and provides a consistent URL\u2026", "tags": []}, {"slug": "markata/plugins/load", "title": "load.py", "description": "The   plugin is responsible for loading and parsing markdown files with frontmatter into Post objects. It provides parallel loading capabilities and handles\u2026", "tags": []}, {"slug": "markata/plugins/analytics", "title": "analytics.py", "description": "The   plugin generates analytics and contribution visualizations for your Markata site. It creates a contributions heatmap similar to GitHub's contribution\u2026", "tags": []}, {"slug": "markata/plugins/setup-logging", "title": "setup_logging.py", "description": "Setup Logging hook sets up the RichHandler for pretty console logs, and file logs to the configured markata's configured  , or   if  is not configured.  The\u2026", "tags": []}, {"slug": "markata/plugins/covers", "title": "covers.py", "description": "The   plugin generates custom cover images for your posts using configurable templates. It supports multiple cover image formats with different sizes, fonts,\u2026", "tags": []}, {"slug": "markata/plugins/base-cli", "title": "base_cli.py", "description": "The   plugin provides Markata's core command-line interface functionality, including essential commands like  ,  , and  . Installation This plugin is built-in\u2026", "tags": []}, {"slug": "markata/plugins/md-it-wikilinks", "title": "md_it_wikilinks.py", "description": "The   plugin adds support for wiki-style links using double brackets ( ). It automatically resolves links to other posts in your site using file names or\u2026", "tags": []}, {"slug": "markata/plugins/generator", "title": "generator.py", "description": "The   plugin adds a meta generator tag to each generated HTML page, indicating that the page was generated by Markata and including the version number.\u2026", "tags": []}, {"slug": "markata/errors", "title": "errors.py", "description": "None !!! class MarkataConfigError  class ???+ source \"MarkataConfigError  source \"", "tags": []}, {"slug": "markata/main", "title": "__main__.py", "description": "None", "tags": []}, {"slug": "markata/standard-config", "title": "standard_config.py", "description": "Standard Config. A module to load tooling config from a users project space. Inspired from frustrations that some tools have a tool.ini, .tool.ini, setup.cfg,\u2026", "tags": []}, {"slug": "markata/hookspec", "title": "hookspec.py", "description": "Markata's hook specification system for plugin development. Overview Markata uses pluggy to define hooks that plugins can implement. These hooks allow plugins\u2026", "tags": []}, {"slug": "markata/about", "title": "__about__.py", "description": "None", "tags": []}, {"slug": "markata/exceptions", "title": "exceptions.py", "description": "None", "tags": []}, {"slug": "markata/init", "title": "__init__.py", "description": "Markata is a tool for handling directories of markdown. !!! method teardown  method ???+ source \"teardown  source \" !!! method _compile_sort_key  method ???+\u2026", "tags": []}, {"slug": "markata/lifecycle", "title": "lifecycle.py", "description": "The LifeCycle is a core component for the internal workings of Markata.  It sets fourth the hooks available, the methods to run them on the Markata instance,\u2026", "tags": []}, {"slug": "tests/plugins/test-redirects", "title": "test_redirects.py", "description": "Tests the redirects plugin !!! function set_directory  function ???+ source \"set_directory  source \" !!! function test_redirect_exists  function ???+ source\u2026", "tags": []}, {"slug": "tests/plugins/test-post-model", "title": "test_post_model.py", "description": "None", "tags": []}, {"slug": "tests/test-feeds", "title": "test_feeds.py", "description": "None", "tags": []}, {"slug": "test", "title": "test.py", "description": "None", "tags": []}, {"slug": "changelog", "title": "Changelog", "description": "Markata Changelog 0.10.0 Fix:   now more accurately returns plain text, does not cut off words, and add an ellipsis. Fix: article_html now typed such that it\u2026", "tags": []}, {"slug": "markata-dev", "title": "Markata's Docs", "description": "Markta.dev home page {.shadow-2xl} Markata builds it's own docs in completely in   using all built in templatates and plugins. Markta.dev home page\u2026", "tags": []}, {"slug": "waylonwalker", "title": "WaylonWalker.com", "description": "Waylonwalker.com home page This Waylon Walker's personal blog where he is learning in public.  Posting about topics such as linux, vim, python, and kedro.\u2026", "tags": []}, {"slug": "index", "title": "Getting Started with Markata", "description": "Markata is a fully plugins all the way down static site generator for folks who just want their site to get started quickly and build great content, with the\u2026", "tags": []}, {"slug": "home-page", "title": "Creating your Home Page", "description": "There are several ways to create your home/landing page, lets walk through them. Default Behavior feed By default if there is no index page, the  feed plugin\u2026", "tags": []}, {"slug": "color-theme", "title": "Theming your markata site", "description": "Default colors The default markata page template support the following colors to be configured in the   file. There are two sets of similarly named colors,\u2026", "tags": []}, {"slug": "nav", "title": "Creating your Navbar", "description": "Creating navbar links with the default markata templates is done by adding links in your   configuration within a   block. Example The following example will\u2026", "tags": []}, {"slug": "multi-template", "title": "Using Multiple Templates", "description": "This page will be rendered multiple times.  This is the normal page, check out title . It uses the og.html template.  This is achieved through the use of the\u2026", "tags": []}, {"slug": "404", "title": "Whoops that page was not found", "description": "404, looks like we can't find the page you are looking for.  Try one of these pages.", "tags": []}, {"slug": "admonitions", "title": "Admonitions", "description": "???+ note open by default you can open a details tab with '+' !!! important inside of admonitions need four leading spaces. ??? note closed by default you can\u2026", "tags": []}, {"slug": "create-manual", "title": "Manually create a new site", "description": "Markata has some templates that let you get up and running quickly, but you can  make a site with only markdown if you wanted. Installation  is hosted on pypi\u2026", "tags": []}]